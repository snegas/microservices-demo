on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      env:
        required: true
        type: string

env:
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

jobs:
  terraform-pr-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
      - name: Prepare
        working-directory: ./src/${{ inputs.project }}
        run: |
          cp -a ../../infrastructure/. ./
      - name: Prepare
        working-directory: ./src/${{ inputs.project }}
        run: |
          terraform init
          terraform workspace select -or-create ${{ inputs.env }}
      - name: Terraform Plan
        id: plan
        working-directory: ./src/${{ inputs.project }}
        run: |
          terraform plan -no-color
        continue-on-error: true
      - name: Push PR Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan for ${{ inputs.env }}')
            })
      
            // 2. Prepare format of the comment
            const output = `Terraform Plan for ${{ inputs.env }} ðŸ“–\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Env: \`${{ inputs.env }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    